// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// encode_utf8_one
std::string encode_utf8_one(CharacterVector code_points);
RcppExport SEXP _emojirx_encode_utf8_one(SEXP code_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type code_points(code_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(encode_utf8_one(code_points));
    return rcpp_result_gen;
END_RCPP
}
// encode_utf8
CharacterVector encode_utf8(List code_points);
RcppExport SEXP _emojirx_encode_utf8(SEXP code_pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type code_points(code_pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(encode_utf8(code_points));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_emojirx_encode_utf8_one", (DL_FUNC) &_emojirx_encode_utf8_one, 1},
    {"_emojirx_encode_utf8", (DL_FUNC) &_emojirx_encode_utf8, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_emojirx(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
